# -*- coding: utf-8 -*-
"""exercises.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1DZf7hc18k1spPzubAkaacNxiWM1wt3yq
"""

import torch
from torch import nn
import numpy as np
import matplotlib.pyplot as plt
torch.__version__

# 1. create a straight line data set using the linear regression formula

weight = 0.3
bias = 0.9

start = 0
end = 1
step = 0.01

X = torch.arange(start, end, step).unsqueeze(dim=1)
y = weight * X + bias

len(X), len(y)

# spliting the data

train_split = int(0.8 * len(X))
X_train, y_train = X[:train_split], y[:train_split]
X_test, y_test = X[train_split:], y[train_split:]

len(X_train), len(y_train), len(X_test), len(y_test)



# creating a function to plot the training and testing data and predictions

import matplotlib.pyplot as plt

def plot_prediction(train_data=X_train,
                    train_labels=y_train,
                    test_data=X_test,
                    test_labels=y_test,
                    predictions=None):
  """Plots training data, test data and compares predictions"""
  plt.figure(figsize=(10, 7))
  #plot training data in blue
  plt.scatter(train_data, train_labels, c="b", s=4, label="Training data")

  # plot test data in green
  plt.scatter(test_data, test_labels, c='green', s=4, label='Testing data')

  if predictions is not None:
    plt.scatter(test_data, predictions, c="r", s=4, label="Predictions")

  # show the legend
  plt.legend(prop={"size": 14});

plot_prediction();

# creating a nn from the subclass nn.Module

class LinearRegressionModel_1(nn.Module):
  def __init__ (self):
    super().__init__()
    self.weights = nn.Parameter(torch.randn(1,
                                             requires_grad=True,
                                             dtype=torch.float))
    self.bias = nn.Parameter(torch.randn(1,
                                          requires_grad=True,
                                          dtype=torch.float))

  def forward(self, x: torch.Tensor):
    return self.weights * x + self.bias

torch.manual_seed(42)
model_0 = LinearRegressionModel_1()
model_0.state_dict()

with torch.inference_mode():
  y_preds = model_0(X_test)

y_preds

plot_prediction(predictions=y_preds)

X_test, y_preds

list(model_0.parameters())

# create a loss function

loss_fn = nn.L1Loss()

# create an optimizer
optimizer = torch.optim.SGD(params=model_0.parameters(),
                            lr=0.01)



# creating a training loop

torch.manual_seed(42)

epochs = 300
for epoch in range(epochs):
  # 0. training mode
  model_0.train()

  # 1. forward pass
  y_preds = model_0(X_train)

  # 2, calculate the loss
  loss = loss_fn(y_preds, y_train)

  # 3. optimizer zero grad
  optimizer.zero_grad()

  # 4. backpropogation
  loss.backward()

  # 5. optimizer step (gradient descent)
  optimizer.step()

  # testing loop
  model_0.eval()
  with torch.inference_mode():
    test_pred = model_0(X_test)
    test_loss = loss_fn(test_pred, y_test)
  # print out what's happening
  if epoch % 10 == 0:
    print(f"Epoch: {epoch} | Loss: {loss} | Test_loss: {test_loss}")

model_0.state_dict()

# evaluating the model

model_0.eval()
with torch.inference_mode():
  y_pred = model_0(X_test)
y_pred

plot_prediction(predictions=y_pred)

